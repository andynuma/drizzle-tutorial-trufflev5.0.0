{"ast":null,"code":"import _classCallCheck from \"/Users/andy/drizzle-tutorial/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/andy/drizzle-tutorial/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/andy/drizzle-tutorial/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/andy/drizzle-tutorial/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/andy/drizzle-tutorial/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/andy/drizzle-tutorial/client/src/ReadString.js\";\nimport React from \"react\";\n\nvar ReadString =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ReadString, _React$Component);\n\n  function ReadString() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ReadString);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ReadString)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      dateKey: null\n    };\n    return _this;\n  }\n\n  _createClass(ReadString, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // const { drizzle, drizzleState } = this.props;\n      // console.log(drizzle);\n      // console.log(drizzleState);\n      var drizzle = this.props.drizzle;\n      var contract = drizzle.contracts.MyStringStore; // let drizzle know we want to wathc the \"myString method\"\n\n      var dataKey = contract.methods[\"myString\"].cacheCall(); //save the \"dateKey\" to local component state for later reference\n\n      this.setState({\n        dataKey: dataKey\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // get the contract state from drizzleState\n      var MyStringStore = this.props.drizzleState.contracts.MyStringStore; // using the saved \"dataKey\" , get the variable we're interested in\n\n      var myString = MyStringStore.myString[this.state.dataKey]; // if it exists, then we display its value\n\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, \"My stored string:\", myString);\n    }\n  }]);\n\n  return ReadString;\n}(React.Component);\n\nexport default ReadString;","map":{"version":3,"sources":["/Users/andy/drizzle-tutorial/client/src/ReadString.js"],"names":["React","ReadString","state","dateKey","drizzle","props","contract","contracts","MyStringStore","dataKey","methods","cacheCall","setState","drizzleState","myString","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAEMC,U;;;;;;;;;;;;;;;;;UAEJC,K,GAAS;AAACC,MAAAA,OAAO,EAAE;AAAV,K;;;;;;wCAEW;AAClB;AACA;AACA;AAHkB,UAIXC,OAJW,GAIA,KAAKC,KAJL,CAIXD,OAJW;AAKlB,UAAME,QAAQ,GAAIF,OAAO,CAACG,SAAR,CAAkBC,aAApC,CALkB,CAOlB;;AACA,UAAMC,OAAO,GAAGH,QAAQ,CAACI,OAAT,CAAiB,UAAjB,EAA6BC,SAA7B,EAAhB,CARkB,CAUlB;;AACA,WAAKC,QAAL,CAAc;AAACH,QAAAA,OAAO,EAAPA;AAAD,OAAd;AACD;;;6BAEQ;AACP;AADO,UAEAD,aAFA,GAEkB,KAAKH,KAAL,CAAWQ,YAAX,CAAwBN,SAF1C,CAEAC,aAFA,EAIP;;AACA,UAAMM,QAAQ,GAAGN,aAAa,CAACM,QAAd,CAAuB,KAAKZ,KAAL,CAAWO,OAAlC,CAAjB,CALO,CAOP;;AACA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAqBK,QAArB,CAAP;AACD;;;;EA3BsBd,KAAK,CAACe,S;;AA8B/B,eAAed,UAAf","sourcesContent":["import React from \"react\";\n\nclass ReadString extends React.Component {\n\n  state =  {dateKey: null};\n\n  componentDidMount() {\n    // const { drizzle, drizzleState } = this.props;\n    // console.log(drizzle);\n    // console.log(drizzleState);\n    const {drizzle} = this.props;\n    const contract =  drizzle.contracts.MyStringStore;\n\n    // let drizzle know we want to wathc the \"myString method\"\n    const dataKey = contract.methods[\"myString\"].cacheCall();\n\n    //save the \"dateKey\" to local component state for later reference\n    this.setState({dataKey})\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const {MyStringStore} =  this.props.drizzleState.contracts;\n\n    // using the saved \"dataKey\" , get the variable we're interested in\n    const myString = MyStringStore.myString[this.state.dataKey]\n\n    // if it exists, then we display its value\n    return <p>My stored string:{myString }</p>;\n  }\n}\n\nexport default ReadString;"]},"metadata":{},"sourceType":"module"}