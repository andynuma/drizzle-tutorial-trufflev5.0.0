{"ast":null,"code":"import _classCallCheck from \"/Users/andy/drizzle-tutorial-trufflev5.0.0/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/andy/drizzle-tutorial-trufflev5.0.0/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/andy/drizzle-tutorial-trufflev5.0.0/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/andy/drizzle-tutorial-trufflev5.0.0/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/andy/drizzle-tutorial-trufflev5.0.0/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/andy/drizzle-tutorial-trufflev5.0.0/client/src/SetString.js\";\nimport React from \"react\";\n\nvar SetString =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SetString, _React$Component);\n\n  function SetString() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SetString);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SetString)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      stackId: null\n    };\n\n    _this.handleKeyDown = function (e) {\n      if (e.keyCode === 13) {\n        _this.setValue(e.target.value);\n      }\n    };\n\n    _this.setValue = function (value) {\n      var _this$props = _this.props,\n          drizzle = _this$props.drizzle,\n          drizzleState = _this$props.drizzleState;\n      var contract = drizzle.contracts.MyStringStore; // let drizzle know we want to call the `set` method with `value`\n\n      var stackId = contract.methods[\"set\"].cacheSend(value, {\n        from: drizzleState.accounts[0]\n      }); // save the `stackId` for later reference\n\n      _this.setState({\n        stackId: stackId\n      });\n    };\n\n    _this.getTxStatus = function () {\n      //  get the transaction states from the drizzle state\n      var _this$props$drizzleSt = _this.props.drizzleState,\n          transactions = _this$props$drizzleSt.transactions,\n          transactionStack = _this$props$drizzleSt.transactionStack; //  set the transaction hash using our saved \"stackId\"\n\n      var txHash = transactionStack[_this.state.stackId]; // if transaction hash does not exist, don't display  anything\n\n      if (!txHash) return null; // otherwise, return the transacton status\n\n      return \"Transaction status:\".concat(transactions[txHash].status);\n    };\n\n    return _this;\n  }\n\n  _createClass(SetString, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        onKeyDown: this.handleKeyDown,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }), \">\", React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, this.getTxStatus));\n    }\n  }]);\n\n  return SetString;\n}(React.Component);\n\nexport default SetString;","map":{"version":3,"sources":["/Users/andy/drizzle-tutorial-trufflev5.0.0/client/src/SetString.js"],"names":["React","SetString","state","stackId","handleKeyDown","e","keyCode","setValue","target","value","props","drizzle","drizzleState","contract","contracts","MyStringStore","methods","cacheSend","from","accounts","setState","getTxStatus","transactions","transactionStack","txHash","status","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAEMC,S;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AAACC,MAAAA,OAAO,EAAC;AAAT,K;;UAERC,a,GAAgB,UAAAC,CAAC,EAAI;AACjB,UAAGA,CAAC,CAACC,OAAF,KAAc,EAAjB,EAAoB;AAChB,cAAKC,QAAL,CAAcF,CAAC,CAACG,MAAF,CAASC,KAAvB;AACH;AACJ,K;;UAEDF,Q,GAAW,UAAAE,KAAK,EAAK;AAAA,wBACiB,MAAKC,KADtB;AAAA,UACTC,OADS,eACTA,OADS;AAAA,UACAC,YADA,eACAA,YADA;AAEjB,UAAMC,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,aAAnC,CAFiB,CAIjB;;AACA,UAAMZ,OAAO,GAAGU,QAAQ,CAACG,OAAT,CAAiB,KAAjB,EAAwBC,SAAxB,CAAkCR,KAAlC,EAAwC;AACpDS,QAAAA,IAAI,EAACN,YAAY,CAACO,QAAb,CAAsB,CAAtB;AAD+C,OAAxC,CAAhB,CALiB,CASjB;;AACA,YAAKC,QAAL,CAAc;AAAEjB,QAAAA,OAAO,EAAPA;AAAF,OAAd;AACH,K;;UAEDkB,W,GAAc,YAAM;AAChB;AADgB,kCAE4B,MAAKX,KAAL,CAAWE,YAFvC;AAAA,UAERU,YAFQ,yBAERA,YAFQ;AAAA,UAEMC,gBAFN,yBAEMA,gBAFN,EAIhB;;AACA,UAAMC,MAAM,GAAGD,gBAAgB,CAAC,MAAKrB,KAAL,CAAWC,OAAZ,CAA/B,CALgB,CAOhB;;AACA,UAAG,CAACqB,MAAJ,EAAY,OAAO,IAAP,CARI,CAUhB;;AACA,0CAA6BF,YAAY,CAACE,MAAD,CAAZ,CAAqBC,MAAlD;AACH,K;;;;;;;6BAEO;AACJ,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,SAAS,EAAE,KAAKrB,aAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,OAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,KAAKiB,WAAX,CAFJ,CADJ;AAMH;;;;EA3CmBrB,KAAK,CAAC0B,S;;AA8C9B,eAAezB,SAAf","sourcesContent":["import React from \"react\"\n\nclass SetString extends React.Component{\n    state = {stackId:null}\n\n    handleKeyDown = e => {\n        if(e.keyCode === 13){\n            this.setValue(e.target.value);\n        }\n    }\n\n    setValue = value =>  {\n        const { drizzle, drizzleState } = this.props;\n        const contract = drizzle.contracts.MyStringStore;\n\n        // let drizzle know we want to call the `set` method with `value`\n        const stackId = contract.methods[\"set\"].cacheSend(value,{\n            from:drizzleState.accounts[0]\n        });\n\n        // save the `stackId` for later reference\n        this.setState({ stackId })\n    }\n\n    getTxStatus = () => {\n        //  get the transaction states from the drizzle state\n        const { transactions, transactionStack }  = this.props.drizzleState;\n\n        //  set the transaction hash using our saved \"stackId\"\n        const txHash = transactionStack[this.state.stackId];\n\n        // if transaction hash does not exist, don't display  anything\n        if(!txHash) return null;\n\n        // otherwise, return the transacton status\n        return `Transaction status:${transactions[txHash].status}`\n    }\n\n    render(){\n        return(\n            <div>\n                <input type=\"text\" onKeyDown={this.handleKeyDown} />>\n                <div>{this.getTxStatus}</div>\n            </div>\n        )\n    }\n}\n\nexport default SetString;"]},"metadata":{},"sourceType":"module"}